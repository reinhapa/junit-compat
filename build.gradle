plugins {
    id 'java'
    id 'signing'
    id 'eclipse'
    id 'jacoco'
    id 'maven-publish'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id 'net.nemerosa.versioning' version '3.1.0'
}

defaultTasks 'build'

configurations {
    asciidoclet
}

repositories {
    mavenCentral()
}

java {
  sourceCompatibility = JavaVersion.VERSION_25
  withJavadocJar()
  withSourcesJar()
}

asciidoctorj { 
    version '1.5.5'
}

dependencies {
    asciidoclet 'org.asciidoctor:asciidoclet:2.0.0'
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.27.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:6.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.20.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:6.0.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.14.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:6.0.0'
}

signing {
    required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
    sign publishing.publications
}

jar {
    manifest {
        attributes 'Implementation-Title': 'JUnit compatibility classes',
                   'Implementation-Version': version,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "net.reini.junit"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

check.dependsOn jacocoTestReport

javadoc {
//    options.docletpath = configurations.asciidoclet.files.asType(List)
//    options.doclet = 'org.asciidoctor.asciidoclet.Asciidoclet'
//    options.addStringOption "-base-dir", "${projectDir}"
//    options.addStringOption "-attribute",
//            "name=${project.name}," +
//            "version=${project.version}," +
//            "title-link=http://github.com/reinhapa/[${project.name} ${project.version}]"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'JUnit compatibility classes'
                description = 'Provides partial backwards compatibility classes in order to more easier migrate to a newer JUnit version.'
                url = 'https://github.com/reinhapa/junit-compat'
                scm {
                    connection = 'scm:git:git@github.com:reinhapa/junit-compat.git'
                    developerConnection = 'scm:git:git@github.com:reinhapa/junit-compat.git'
                    url = 'https://github.com/reinhapa/junit-compat.git'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'reinhapa'
                        name = 'Patrick Reinhart'
                        email = 'patrick@reini.net'
                    }
                    developer {
                        id = 'ohumbel'
                        name = 'Otmar Humbel'
                        email = 'ohumbel@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}
